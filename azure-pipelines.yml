name: $(version)

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: PlaygroundSecrets
  - group: Chartmuseum
  - name: imageName
    value: gds
  - name: version
    value: $[format('1.0.{0}', counter('1.0', 0))]

stages:
- stage: Build
  displayName: Build and push image

  jobs:
    - job: dotnet
      displayName: build, test and pack nuget
      steps:
        - task: VersionDotNetCoreAssemblies@2
          inputs:
            Path: '$(Build.SourcesDirectory)'
            VersionNumber: '$(Build.BuildNumber)'
            Injectversion: False
            VersionRegex: '\d+\.\d+\.\d+'
            FilenamePattern: '.csproj'
            SDKNames: 'Microsoft.NET.Sdk'
            OutputVersion: 'OutputedVersion'

        - task: DotNetCoreCLI@2
          displayName: Build
          inputs:
            projects: '**/*.csproj'
            arguments: '--configuration Release'

        - task: DotNetCoreCLI@2
          displayName: 'dotnet pack'
          inputs:
            command: 'pack'
            packagesToPack: 'SW.Gds.Sdk/SW.Gds.Sdk.csproj;'
            configuration: 'Release'
            nobuild: true
            versioningScheme: 'byBuildNumber'

        - task: NuGetCommand@2
          condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
          inputs:
            command: 'push'
            packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
            nuGetFeedType: 'external'
            publishFeedCredentials: 'swnuget' 

    - job: deploy
      displayName: build, push image and deploy to playground
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
      steps:
        - task: Docker@2
          displayName: Build and push an image to container registry
          inputs:
            command: buildAndPush
            repository: simplify9/$(imageName)
            dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
            containerRegistry: simplify9cr
            tags: |
              $(version)
              latest

        - task: HelmInstaller@0
          displayName: 'Install Helm 3.2.4'
          inputs:
            helmVersion: '3.2.4'
            checkLatestHelmVersion: false
            installKubectl: false

        - task: HelmDeploy@0
          displayName: Helm package
          inputs:
            command: package
            chartPath: chart
            arguments: --version $(version) --app-version $(version)
            updatedependency: true

        - task: Bash@3
          displayName: 'Upload to chart museum'
          inputs:
            targetType: 'inline'
            script: |
              for f in $(Build.ArtifactStagingDirectory)/*.tgz
              do 
                echo "Uploading @$f"
                curl --data-binary "@$f" https://charts.sf9.io/api/charts --user $(CmUser):$(CmPassword)
              done 

        - task: HelmDeploy@0
          displayName: 'helm upgrade'
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceConnection: 'k8s-s9-dev'
            namespace: playground
            command: upgrade
            releaseName: '$(imageName)'
            chartName: '$(imageName)'
            chartVersion: $(version)
            overrideValues: global.bus.rabbitUrl=$(rabbitUrl),global.cloudFiles.secretAccessKey=$(SecretAccessKey),global.cloudFiles.accessKeyId=$(AccessKeyId),global.cloudFiles.serviceUrl=$(ServiceUrl),global.cloudFiles.bucketName=$(BucketName)'
          
            arguments: >
              --repo https://charts.sf9.io
              --set environment="Staging"
              --set ingress.hosts={gds.sf9.io}
              --set db="$(dbcs)"
              --set ingress.enabled=true
              --set ingress.path="/api"
              --set ingress.tls[0].secretName="gds-tls"
              --set ingress.annotations."cert-manager\.io/cluster-issuer"="letsencrypt-nginx"

